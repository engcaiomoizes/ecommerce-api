// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma/clientPg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  M
  F
}

enum Type {
  F
  J
}

model User {
  id String @id @default(cuid())
  name String
  cpf String @db.VarChar(14) @unique
  celphone String @db.VarChar(15)
  gender Gender
  birth String @db.VarChar(10)
  type Type
  credit Decimal @default(0)
  email String @unique
  password String
  receiveNewsletter Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime?

  addresses Address[]
  orders Order[]
  reviews Review[]

  @@map("users")
}

model Address {
  id Int @id @default(autoincrement())
  userId String
  main Boolean @default(false)
  identification String @db.VarChar(50)
  zipCode String @db.VarChar(10)
  street String @db.VarChar(100)
  number String? @db.VarChar(10)
  complement String? @db.VarChar(50)
  district String @db.VarChar(50)
  reference String? @db.VarChar(100)
  city String @db.VarChar(50)
  state String @db.Char(2)
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String @db.Text
  slug String
  image String
  price Decimal @db.Money
  priceWithDiscount Decimal? @db.Money
  oldPrice Decimal? @db.Money
  discountPercentage Int? @db.SmallInt
  maxInstallment String? @db.VarChar(30)
  quantity Int @default(0)
  available Boolean @default(true)
  thumbnail String
  categoryId Int?
  createdAt DateTime @default(now())

  images Product_Image[]
  offers Offer_Product[]
  reviews Review[]

  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)

  @@map("products")
}

model Category {
  id Int @id @default(autoincrement())
  parentId Int?
  name String
  slug String

  childs Category[] @relation("Parent")
  products Product[]

  parent Category? @relation("Parent", fields: [parentId], references: [id], onDelete: SetNull)

  @@map("categories")
}

enum Size {
  original
  p
  m
  g
  gg
}

model Product_Image {
  id Int @id @default(autoincrement())
  productId Int
  size Size
  url String
  position Int @db.SmallInt @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("product_images")
}

model Order {
  id String @id @default(cuid())
  userId String
  date DateTime @db.Timestamp()
  status Int @db.SmallInt
  statusDescription String @db.VarChar(30)
  totalValue Decimal
  deliveryTime DateTime @db.Timestamp()

  products Order_Product[]
  paymentInformation Order_Payment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("orders")
}

model Order_Product {
  id Int @id @default(autoincrement())
  orderId String
  quantity Int @db.SmallInt @default(1)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order_products")
}

enum PaymentMethod {
  PIX
  BOLETO
  CARTAO
  CARTAO_PARCELADO
  PAYPAL
  OUTROS
}

model Order_Payment {
  id Int @id @default(autoincrement())
  orderId String
  paymentDate DateTime @db.Timestamp()
  paymentMethod PaymentMethod
  paymentDescription String @db.VarChar(30)
  boletoId String?
  referenceId String?
  emv String?
  txid String?
  paymentExpired Boolean @default(false)
  paymentExpirationDate DateTime @db.Timestamp()

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order_payments")
}

model Offer {
  id Int @id @default(autoincrement())
  name String
  referenceBanner String
  startsAt DateTime @db.Timestamp()
  endsAt DateTime @db.Timestamp()

  products Offer_Product[]

  @@map("offers")
}

model Offer_Product {
  hashCode String @id @default(cuid())
  productId Int
  offerId Int
  price Decimal @db.Money
  priceWithDiscount Decimal @db.Money
  discountPercentage Int @db.SmallInt
  quantityAvailable Int @db.SmallInt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("offer_products")
}

model Review {
  id Int @id @default(autoincrement())
  productId Int
  userId String
  score Int @db.SmallInt @default(1)
  title String
  description String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
